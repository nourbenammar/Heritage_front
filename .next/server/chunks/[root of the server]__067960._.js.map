{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///Users/nourbenammar/Desktop/Archive/src/app/api/artguru/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\n\nexport const dynamic = \"force-dynamic\";\n\nconst BASE_URL = \"https://api.picaapi.com/aigc/image\";\nconst HEADERS = {\n  \"app-version-code\": \"1040200\",\n  authorization: `Bearer ${process.env.ARTGURU_AUTH_TOKEN}`,\n  vtoken: process.env.ARTGURU_VTOKEN,\n  \"distinct-id\":\n    \"194c2a6aec879a-0555435a87d4bc8-1d525636-2007040-194c2a6aec9abb\",\n  \"accept-language\": \"en-US,en;q=0.9\",\n  from: \"web\",\n  lang: \"en\",\n  origin: \"https://www.artguru.ai\",\n  referer: \"https://www.artguru.ai/\",\n};\n\nexport async function POST(req: NextRequest) {\n  try {\n    const path = req.nextUrl.searchParams.get(\"path\");\n    if (!path) {\n      return NextResponse.json(\n        { error: \"Missing API path parameter\" },\n        { status: 400 }\n      );\n    }\n\n    // Clone headers and preserve original\n    const headers = new Headers(HEADERS);\n    const contentType = req.headers.get(\"content-type\") || \"\";\n    headers.set(\"content-type\", contentType);\n\n    // Get raw body stream\n    const body = await req.arrayBuffer();\n\n    const response = await fetch(`${BASE_URL}/${path}`, {\n      method: \"POST\",\n      headers: headers,\n      body: body,\n    });\n\n    // Forward exact response\n    const responseBody = await response.arrayBuffer();\n\n    return new NextResponse(responseBody, {\n      status: response.status,\n      headers: {\n        \"Content-Type\":\n          response.headers.get(\"Content-Type\") || \"application/json\",\n      },\n    });\n  } catch (error) {\n    console.error(\"[Artguru Proxy Error]\", error);\n    return NextResponse.json(\n      { error: \"Internal server error\" },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":";;;;AAAA;;AAEO,MAAM,UAAU;AAEvB,MAAM,WAAW;AACjB,MAAM,UAAU;IACd,oBAAoB;IACpB,eAAe,CAAC,OAAO,EAAE,QAAQ,GAAG,CAAC,kBAAkB,EAAE;IACzD,QAAQ,QAAQ,GAAG,CAAC,cAAc;IAClC,eACE;IACF,mBAAmB;IACnB,MAAM;IACN,MAAM;IACN,QAAQ;IACR,SAAS;AACX;AAEO,eAAe,KAAK,GAAgB;IACzC,IAAI;QACF,MAAM,OAAO,IAAI,OAAO,CAAC,YAAY,CAAC,GAAG,CAAC;QAC1C,IAAI,CAAC,MAAM;YACT,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA6B,GACtC;gBAAE,QAAQ;YAAI;QAElB;QAEA,sCAAsC;QACtC,MAAM,UAAU,IAAI,QAAQ;QAC5B,MAAM,cAAc,IAAI,OAAO,CAAC,GAAG,CAAC,mBAAmB;QACvD,QAAQ,GAAG,CAAC,gBAAgB;QAE5B,sBAAsB;QACtB,MAAM,OAAO,MAAM,IAAI,WAAW;QAElC,MAAM,WAAW,MAAM,MAAM,GAAG,SAAS,CAAC,EAAE,MAAM,EAAE;YAClD,QAAQ;YACR,SAAS;YACT,MAAM;QACR;QAEA,yBAAyB;QACzB,MAAM,eAAe,MAAM,SAAS,WAAW;QAE/C,OAAO,IAAI,gIAAA,CAAA,eAAY,CAAC,cAAc;YACpC,QAAQ,SAAS,MAAM;YACvB,SAAS;gBACP,gBACE,SAAS,OAAO,CAAC,GAAG,CAAC,mBAAmB;YAC5C;QACF;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,yBAAyB;QACvC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAwB,GACjC;YAAE,QAAQ;QAAI;IAElB;AACF"}},
    {"offset": {"line": 112, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}